{"ast":null,"code":"var _jsxFileName = \"/Users/ivan/Biko/bikoVehicular/client/src/components/GifList.tsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport './GifList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GifList = () => {\n  _s();\n  const [gifs, setGifs] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const getGifs = async () => {\n    setIsLoading(true);\n    const response = await fetch('http://localhost:3000/api/gifs');\n    const data = await response.json();\n    setGifs(data);\n    setIsLoading(false);\n  };\n  useEffect(() => {\n    getGifs();\n  }, []);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 25\n  }, this);\n  if (gifs.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Sorry, gifs not found :/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 33\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gifs\",\n    children: gifs.map((gif, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"gif\",\n      src: gif.imgUrl,\n      alt: gif.name\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(GifList, \"xbpWnWVCLtayW1nBmSqkbVAgtWg=\");\n_c = GifList;\nvar _c;\n$RefreshReg$(_c, \"GifList\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","GifList","_s","gifs","setGifs","isLoading","setIsLoading","getGifs","response","fetch","data","json","children","fileName","_jsxFileName","lineNumber","columnNumber","length","className","map","gif","index","src","imgUrl","alt","name","_c","$RefreshReg$"],"sources":["/Users/ivan/Biko/bikoVehicular/client/src/components/GifList.tsx"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { Gif } from '../types/interface'\nimport './GifList.css'\n\nexport const GifList = () => {\n  const [gifs, setGifs] = useState<Gif[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n\n  const getGifs = async () => {\n    setIsLoading(true)\n    const response = await fetch('http://localhost:3000/api/gifs')\n    const data = await response.json()\n    setGifs(data)\n    setIsLoading(false)\n  }\n\n  useEffect(() => {\n    getGifs()\n  }, [])\n\n  if (isLoading) return <p>Loading...</p>\n  if (gifs.length === 0) return <p>Sorry, gifs not found :/</p>\n\n  return (\n    <div className=\"gifs\">\n      {gifs.map((gif, index) => (\n        <img className=\"gif\" src={gif.imgUrl} alt={gif.name} key={index} />\n      ))}\n    </div>\n  )\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtB,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAQ,EAAE,CAAC;EAC3C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMU,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1BD,YAAY,CAAC,IAAI,CAAC;IAClB,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;IAC9D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClCP,OAAO,CAACM,IAAI,CAAC;IACbJ,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAEDR,SAAS,CAAC,MAAM;IACdS,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,SAAS,EAAE,oBAAOL,OAAA;IAAAY,QAAA,EAAG;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EACvC,IAAIb,IAAI,CAACc,MAAM,KAAK,CAAC,EAAE,oBAAOjB,OAAA;IAAAY,QAAA,EAAG;EAAwB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAE7D,oBACEhB,OAAA;IAAKkB,SAAS,EAAC,MAAM;IAAAN,QAAA,EAClBT,IAAI,CAACgB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACnBrB,OAAA;MAAKkB,SAAS,EAAC,KAAK;MAACI,GAAG,EAAEF,GAAG,CAACG,MAAO;MAACC,GAAG,EAAEJ,GAAG,CAACK;IAAK,GAAMJ,KAAK;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACnE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAAd,EAAA,CA1BYD,OAAO;AAAAyB,EAAA,GAAPzB,OAAO;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}